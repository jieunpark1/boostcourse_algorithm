#그래프 자료구조
#: 객체 간의 연결관계를 표현하는 자료구조
# 그래프 = 정점(Vertex, Node) + 간선(Edge)
# 예) 네트워크, 도로시스템, 소셜 미디어 등 연결된 요소들 간의 관계를 표현, 분석
# - 장점: 복잡한 관계를 명확히 파악, 효율적으로 문제 해결 가능 -> 최단거리, 최소비용, 친구추천 알고리즘
# BFS, DFS와도 연관성


#방향 그래프 / 무방향 그래프(방향 양쪽이 default)
#다중 그래프(한 노드에서 다른 노드로 여러 edge가 존재, self-loop허용) / 단순 그래프 (한 노드에서 다른노드로 하나의 edge>가 존재, self-loop 허용되지 않음)
#가중치 그래프 / 비가중치 그래프  - 서울->부산(가중치 6) / 서울->인천(가중치 2) <-- edge에는 길이에 따른 cost(이동비용, 거리, 시간, 용량 등)가 없기 때문에 가중치로 cost를 줌 (다익스트라, 플로이드워셜 알고리즘) / 비가중치 그래프의 경우 인스>타 팔로우 관계
#순환 그래프(그래프 내 사이클이 존재하는 그래프. 시작정점=끝정점 같은 경로) / 비순환 그래프(트리 자료구조, DAG-Directed Acyclic Graph, 위상정렬)
# -- 트리 자료구조는 그래프 자료 구조에 포함됨


#인접행렬: 정점과 간선 연결관계를 2차원 배열 형태로 나타내는 방법(adjacency matrix)
# - 두 노드가 연결되어 있으면 행렬의 해당 위치에 1(또는 가중치), 연결되어 있지 않으면 0을 기록
# -- 단순 그래프 -> 자기 자신 연결 x, x=y인 경우는 모두 0
# -- 무방향 그래프 -> 무조건 간선 양방향. x=y기준으로 대칭
# - 빈 데이터가 많기 떄문에 많이 사용하지는 않지만, 그래도 알아놓긴 해야함

#인접리스트(adjacency list)
# - 노드 번호가 0부터 시작하는 경우: graph를 리스트로 구현, 2차원 리스트로 구현
# -- 예) graph = [ [1, 2, 4], [0, 3], [0, 4], [1, 5], [0, 2, 3]]

# - 노드 번호가 숫자x or 0부터 시작하지 않을 때:  hash table이용하여, 각 노드에 연결된 다른 노드 목록을 list로 나타냄.
# - 대부분 hash table로 많이 작성함
# graph = {1:[2,3,5], 2: [1,4], ... , 5:[1,3,4]}
# for next_v in graph[1]:
#    print(next_v)
#암시적그래프(implicit graph, grid)
